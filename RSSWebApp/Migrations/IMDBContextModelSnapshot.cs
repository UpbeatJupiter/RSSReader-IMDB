// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RSSWebApp.Data.Context;

#nullable disable

namespace RSSWebApp.Migrations
{
    [DbContext(typeof(IMDBContext))]
    partial class IMDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RSSWebApp.Data.Entity.Award", b =>
                {
                    b.Property<int>("AwardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AwardId"));

                    b.Property<string>("AwardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("AwardYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Year");

                    b.Property<int>("CastId")
                        .HasColumnType("int");

                    b.HasKey("AwardId");

                    b.HasIndex("CastId");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("RSSWebApp.Data.Entity.Cast", b =>
                {
                    b.Property<int>("CastId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CastId"));

                    b.Property<string>("CastDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Details");

                    b.Property<string>("CastLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Link");

                    b.Property<string>("CastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("CastPhoto")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Photo");

                    b.HasKey("CastId");

                    b.ToTable("Casts");
                });

            modelBuilder.Entity("RSSWebApp.Data.Entity.CastRole", b =>
                {
                    b.Property<int>("CastRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CastRoleId"));

                    b.Property<string>("CastRoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("CastRoleId");

                    b.ToTable("CastRoles");
                });

            modelBuilder.Entity("RSSWebApp.Data.Entity.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("RSSWebApp.Data.Entity.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieId"));

                    b.Property<string>("MovieLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Link");

                    b.Property<string>("MovieName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("MovieRate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Rate");

                    b.Property<string>("MovieYear")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Year");

                    b.HasKey("MovieId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("RSSWebApp.Data.Entity.MovieCastRole", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("CastId")
                        .HasColumnType("int");

                    b.Property<int>("CastRoleId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "CastId", "CastRoleId");

                    b.HasIndex("CastId");

                    b.HasIndex("CastRoleId");

                    b.ToTable("MovieCastRoles");
                });

            modelBuilder.Entity("RSSWebApp.Data.Entity.MovieCategory", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("MovieCategories");
                });

            modelBuilder.Entity("RSSWebApp.Data.Entity.Award", b =>
                {
                    b.HasOne("RSSWebApp.Data.Entity.Cast", "Cast")
                        .WithMany("Awards")
                        .HasForeignKey("CastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cast");
                });

            modelBuilder.Entity("RSSWebApp.Data.Entity.MovieCastRole", b =>
                {
                    b.HasOne("RSSWebApp.Data.Entity.Cast", "Cast")
                        .WithMany("MovieCastRoles")
                        .HasForeignKey("CastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RSSWebApp.Data.Entity.CastRole", "CastRole")
                        .WithMany("MovieCastRoles")
                        .HasForeignKey("CastRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RSSWebApp.Data.Entity.Movie", "Movie")
                        .WithMany("MovieCastRoles")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cast");

                    b.Navigation("CastRole");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("RSSWebApp.Data.Entity.MovieCategory", b =>
                {
                    b.HasOne("RSSWebApp.Data.Entity.Category", "Category")
                        .WithMany("MovieCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RSSWebApp.Data.Entity.Movie", "Movie")
                        .WithMany("MovieCategories")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("RSSWebApp.Data.Entity.Cast", b =>
                {
                    b.Navigation("Awards");

                    b.Navigation("MovieCastRoles");
                });

            modelBuilder.Entity("RSSWebApp.Data.Entity.CastRole", b =>
                {
                    b.Navigation("MovieCastRoles");
                });

            modelBuilder.Entity("RSSWebApp.Data.Entity.Category", b =>
                {
                    b.Navigation("MovieCategories");
                });

            modelBuilder.Entity("RSSWebApp.Data.Entity.Movie", b =>
                {
                    b.Navigation("MovieCastRoles");

                    b.Navigation("MovieCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
